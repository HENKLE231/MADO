(OK)
//ConfigManager
Atributos:
  //Colocar todas as configurações dentro de um dict.
  //Mangá
  - manga_name: String;
  - base_link: String;
  - initial_chapter: Int;
  - final_chapter: Int;
  //Pastas
  - cwd: String;
  - user_dir: String;
  - img_dir: String;
  - download_dir: String;
  - files_dir: String;
  - chapters_dir: String;
  - final_dir: String;
  // Arquivo de configuração.
  - config_file: String;
Funções:
  - load_configs(): void;
  - edit_config(String config_name, String value): void;
  - save_configs(): void;

//Core
//Não esquecer de converter o chapter e final chapter para int ou float
Funções: 
  - verify_outcome(Lista com instância da Queue, RootWindow, InfoWindow e se houver SeleniumManager app_instances, String error, array com dois Int coords_to_close): void;
  - download_chapters(instacia da Queue queue, instancia da RootWindow root_window, instancida da InfoWindow info_window): void;
  - transfer(instacia da Queue queue, instancia da RootWindow root_window, instancida da InfoWindow info_window): void;

(OK)
//InternetTester
  - get_download_speed(): Float;
  - get_upload_speed(): Float;
  - get_ping_delay():  Float;

===========================================================
//GUI (Criar arquivo)

(OK)
//RootWindow(String title)
Atributos:
  - window: instancia TK;
  - title: String;
  - default_padx: int;
  - default_pady: int;
  - previous_window: String;
  - current_window: String;
  - app_windows: dict de tk.Frame;
  - config_filds: dict de dicts com String display_frame, tk.label, tk.border, tk.entry e tk.var de cada campo.
Funções:
  - switch_frame(String next_window): void;
  - save_config_changes(): void;
  - update_all_fields(): void;
  - highlight_fields(Dict de Strings configs_and_warnings): void;
  - unhighlight(): void;

//HomeFrame(instância da RootWindow parent, instancia de Queue queue, instância da InfoWindow info_window)
Atributos:
  - home_frame: tk.Frame;
  - frame_title = String;
  - subprocess_id: int;
  - var_initial_chapter = tk.StringVar;
  - var_final_chapter = tk.StringVar;
  - WIDGETS DO TK;
Funções:
  - delete_downloaded_chapters(instancia da RootWindow parent, instancia de InfoWindow info_window): void(colocar descrição);
  - verify_for_run(instancia da Queue): void; (mudar p verify_fields)
  - interrrupt_process(instância da Queue queue, instância da RootWindow parent, Array de string info_lines, String info_title): void;
  - run(instância da Queue queue, instância da RootWindow parent, instância da InfoWindow info_window, boolean download, boolean transfer): void;

Atributos:
Funções:

(OK)
//ConfigFrame(instancia da RootWindow)
Atributos:
  - var_manga_name: tk.StringVar;
  - var_base_link: tk.StringVar;
  - var_final_dir: tk.StringVar;
  - var_imgs_dir: tk.StringVar;
  - var_download_dir: tk.StringVar;
  - var_files_dir: tk.StringVar;
  - WIDGETS DO TK;
Funções:
  - select_dir(String title, tk.stringVar variable): void;
  - reset_configs(instância da RootWindow parent): void;
  - save_config_changes(): void;

//InfoFrame(Instância da RootWindow parent, Instância da Queue queue)
Atributos:
  - num_info_lines: int;
  - max_char_per_line: int;
  - dynamic_button_action: String;
  - dynamic_button_text: String;
  - WIDGETS DO TK;
Funções:
  - execute_dynamic_button_action(instância da Queue queue, instância da RootWindow parent): void;
  - set_dynamic_button_action(String action): void;
  - show_info(Array de string new_info_lines, String info_title): void;
  - update_last_lines(Array de string info_lines, int number_of_lines_to_delete): void;
  - get_info(): Array de Strings;
  - clear_info(): void;

===========================================================
(OK)
//TextFormatter
Funções:
  - get_last_incident_index(String text, String character): int;
  - get_index_of_what_comes_last(String text, Array de string characters): int;
  - format_text(Array de String lines, int max_length): Array de Strings;

//Main
//Importar telas

//PDFManager
Funções:
  - convert_to_pdf(String files_dir, String file): String(mudar);
  - compile_chapter(String files_dir, String files, String chapters_dir, String chapter): String(mudar);

//FunctionsManager
Funções:
  - remove(instancia da Queue queue, Array de Strings function): void;
  - get(instancia da Queue queue): Array String;
  - add(instancia da Queue queue, Array de String e outros tipos);

//ScreenManager (verificar necessidade de funções de reconhecimento de tela)==============
Atributos:
  - left_side: tupla de 4 Int;
  - right_side: tupla de 4 Int;
  - middle_of_left_side: tupla de 2 Int;
  - middle_of_right_side: tupla de 2 Int;
  - point_x_zero: Int;
  - point_y_zero: Int;
  - screen_x: Int;
  - point_x_zero: Int;
  - screen_y: Int;
  - work_area_x: Int;
  - work_area_y: Int;
  - pause: Float;
Funções:
  - locate(String img_name, Tupla de 4 Int region, Double confidence): Tupla de dois Int.
  - wait_for(Float time_out, Array de String img_names, String how_many, Tupla de 4 Int region, Float confidence): String;(mudar p void)
  - wait_until_become_invisible(Float time_out, Array de String img_names, String how_many,  tupla de 4 Int region, Float confidence): String(mudar p void);
  - parse_coord_to_region(Tupla de 4 int coords): Tupla de 4 int;
  - set_pause(Float pause): void;
  - move_in_explorer(String dir): void;
  - click(Tupla de 2 int, String button, Int clicks): void;
  - press_keys(Array de String keys): void;
  - open_anonimous_tab(): void;
  - select_all(): void();
  - delete(): void;
  - copy(): void;
  - paste_and_confirm(): void;
  - confirm(): void;
  - paste(): void;
  - drag(Tupla de 2 int init_coords, Tupla de 2 int final_coords): void;
  - close_window(): void;
  - close_windows_by_coords(Array de tuplas com 2 int): void;

//SeleniumManager
Atributos:
  - service: Service;
  - options: webdriver.ChromeOptions;
  - nav: webdriver.Chrome;
  - img_info: Array de tupla com 2 Strings e 1 Boolean.
Funções:
  - open_nav(String page_load_strategy, String display, Tupla de 4 Int size_and_position): void;
  - close_nav(instância de Queue queue): void;
  - open_link(String link, instância de Queue queue): String(mudar p void);
  - get_imgs_url(String manga_name, int chapter): String(mudar p void);
  - execute_script(Array de String script): void;
  - download_img(String img_name, String url): String(mudar p void);
  - get_download_conclusion_percentage(String download_dir) Float;

//SystemManager (Verificar necessidade das funções)
Atributos:
  //Importar configs
  - window_states: Dict de Int;
Funções:
  - end_process(String target, int pid): void;
  - get_window(String window_name): Int;
  - get_window_state(int window): String;
  - set_window_state(String new_state, int window): void;
  - get_window_position(int window): tupla de 2 int;
  - set_window_position(int window tupla de 4 int size_and_position): void;
  - set_window_position_by_initial_point(int window, tupla de 2 int initial point): void;
  - get_half_screen_coords(String side): Array de 4 int;
  - get_middle_of_window(tupla de 4 int coords): tupla de 2 int;
  - wait_until_open(Float time_out, window_name): String(mudar p void);
  - get_fold_name(String path): String;
  - close_windows(Array de string windows_to_close): void;
  - get_window_name(): String;
  - open_app(String exe_name): void;
  - open_explorer(String path): void;
  - clear_dirs(Array de string): void;
  - delete_files(Strig path, Array de String patterns): void;
  - delete_config_txt(): void;
  - move_files(String current_dir, String new_dir, String pattern): void;
  - file_with_pattern_exists(String path, String pattern): boolean;
  - path_exists(String path): boolean;
  - count_files(String path, Array de Strings patterns, Int to_meet): int;
  - copy_files(String current_dir, String new_dir, String pattern): void;

(OK)
//TimeManager
Atributos:
  - start_times: Lista de Int.
Funções:
  - start(): void;
  - end(): void;
  - time_is_up(double time_out): Boolean;
  - get_download_time_estimate(Int amount, String average_size, String measuring_unit, Int tolerance_percentage): Int;
  - parse_to_MB(Float size, String measuring_unit): Float;

















